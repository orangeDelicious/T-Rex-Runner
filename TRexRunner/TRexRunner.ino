#include "U8glib.h"

//Fix Cacti Collision
//Fix First Cacti Bug? Looping
//Difficulty Increase
//Menu
//Multiple Dino Bitmaps

//--------------------Bitmaps--------------------//

//----------Dimensions----------//
#define dino_width 21
#define dino_height 20
#define smallcactus_width 8
#define smallcactus_height 17
#define gameover_width 99
#define gameover_height 35

//----------Bitmap Arrays----------//
static unsigned char smallcactus_bits[] = {
   0x18, 0x18, 0x98, 0x98, 0x99, 0x99, 0x99, 0x99, 0x79, 0x19, 0x1e, 0x18,
   0x18, 0x18, 0x18, 0x18, 0x18 };

static unsigned char dino_bits[] = {
   0x00, 0xf0, 0x0f, 0x00, 0xd8, 0x1f, 0x00, 0xf8, 0x1f, 0x00, 0xf8, 0x1f,
   0x00, 0xf8, 0x01, 0x00, 0xf8, 0x03, 0x01, 0xfc, 0x0f, 0x03, 0x7e, 0x00,
   0x07, 0xff, 0x00, 0x8e, 0x7f, 0x03, 0xfe, 0x7f, 0x00, 0xfc, 0x7f, 0x00,
   0xfc, 0x7f, 0x00, 0xf8, 0x3f, 0x00, 0xf0, 0x1f, 0x00, 0xe0, 0x1f, 0x00,
   0xc0, 0x0d, 0x00, 0xc0, 0x08, 0x00, 0x40, 0x08, 0x00, 0xc0, 0x18, 0x00 };

static unsigned char gameover_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xc0, 0x03, 0x0e, 0xd8, 0xc0, 0x07, 0x80, 0x07, 0x24,
   0xe0, 0x01, 0x0f, 0x00, 0x20, 0x00, 0x09, 0xf8, 0x40, 0x00, 0x80, 0x04,
   0x66, 0x30, 0x80, 0x09, 0x00, 0x20, 0x03, 0x19, 0xe8, 0xc0, 0x03, 0x80,
   0x04, 0x3c, 0xe0, 0x01, 0x0d, 0x00, 0x60, 0x02, 0x1b, 0x88, 0x40, 0x00,
   0xc0, 0x0c, 0x18, 0x20, 0x00, 0x07, 0x00, 0xc0, 0x03, 0x11, 0x98, 0xc0,
   0x07, 0x80, 0x07, 0x08, 0xe0, 0x01, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54,
   0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xfe, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x7e, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x1e, 0xe6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x4e, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0xef, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xee, 0xef, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0xe0, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9e, 0xf4, 0x01,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
   0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xfe, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


//----------Constructor----------//
U8GLIB_NHD_C12864 u8g(13, 11, 10, 9, 8);  // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9, RST = 8

//----------Initializing Variables----------//
unsigned long dinoTimeToMove = 0;
unsigned long dinoTimeToDraw = 0;

String score;
int analogToDigitalIN;
int compensation = 0;
int gameOver = 0;

int down = 0;
int jump = 0;
int dinoY = 44;
int cactiX1 = 130;
int cactiX2 = cactiX1 + random(60, 110);
int cactiX3 = cactiX2 + random(60, 110);

void reset(void) {
  compensation = millis()/200;
  gameOver = 0;
  down = 0;
  jump = 0;
  dinoY = 44;
  cactiX1 = 130;
  cactiX2 = cactiX1 + random(60, 110);
  cactiX3 = cactiX2 + random(60, 110);
}

void keyPress(void) {
  analogToDigitalIN = analogRead(0);    // read the value from the sensor
  if ( analogToDigitalIN < 250 && analogToDigitalIN > 150 && gameOver == 1 ) reset();
  else if ( dinoY == 44 && analogToDigitalIN < 850 && analogToDigitalIN > 800 ) {
    jump = 1;
    down = 1;
  }
}

void moveObjects() {
  if( millis() > dinoTimeToMove+50 ){
    moveDino();
    moveCactus();
    dinoTimeToMove = millis();  
  }
}

void moveDino(){
  if ( jump == 1 || dinoY <= 43 ) {
    jump = 0;
    if ( dinoY >= 16 && down == 1 ) dinoY -= 2;
    else {
      down = 0;
      dinoY += 2;
    }
  }
}

void moveCactus(){
  
  cactiX1 -= 2;
  cactiX2 -= 2;
  cactiX3 -= 2;
  //Serial.println(cactiX3);


  if ( cactiX1 <= -15 ) {
    cactiX1 = cactiX2;
    cactiX2 = cactiX3;
    cactiX3 = cactiX2 + random(50, 100);
  }
}

void draw(void) {
  if( millis() > dinoTimeToDraw + 25 ){
    do {
      drawDinoCactus();
      drawScore();
      if ( gameOver == 1 ) playAgain();
    } while( u8g.nextPage() );
    dinoTimeToDraw = millis();
  }
}

void drawDinoCactus( ){
  u8g.drawXBM(10, dinoY, dino_width, dino_height, dino_bits);
  u8g.drawXBM(cactiX1, 47, smallcactus_width, smallcactus_height, smallcactus_bits);
  u8g.drawXBM(cactiX2, 47, smallcactus_width, smallcactus_height, smallcactus_bits);
  u8g.drawXBM(cactiX3, 47, smallcactus_width, smallcactus_height, smallcactus_bits);
}

void drawScore(void){
  char scoreBuff[50];
  if ( gameOver != 1 ) {
    score = "Score: ";
    score += millis()/200 - compensation;
  }
  score.toCharArray(scoreBuff, 50);
  u8g.setFont(u8g_font_courB08);
  u8g.drawStr( 55, 8, scoreBuff );
}


void collision(){
  if ( cactiX1 <= 23 && cactiX1 + smallcactus_width >= 15 && dinoY+20 >= 50 ) gameOver = 1;
}

void playAgain(){
  u8g.drawXBM(14, 14, gameover_width, gameover_height, gameover_bits);
}


void setup(void) {
  u8g.setRot180();
  u8g.setContrast( 3 );
  Serial.begin(9600);
}


void loop(void) {
  u8g.firstPage();
  keyPress();
  if ( gameOver != 1 ) moveObjects();
  draw();
  collision();
}

